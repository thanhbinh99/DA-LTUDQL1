#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ThiTracNghiem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLTTN")]
	public partial class QLTTNDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCapDo(CapDo instance);
    partial void UpdateCapDo(CapDo instance);
    partial void DeleteCapDo(CapDo instance);
    partial void InsertCauHoi(CauHoi instance);
    partial void UpdateCauHoi(CauHoi instance);
    partial void DeleteCauHoi(CauHoi instance);
    partial void InsertDapAn(DapAn instance);
    partial void UpdateDapAn(DapAn instance);
    partial void DeleteDapAn(DapAn instance);
    partial void InsertDeThi(DeThi instance);
    partial void UpdateDeThi(DeThi instance);
    partial void DeleteDeThi(DeThi instance);
    partial void InsertHocSinh(HocSinh instance);
    partial void UpdateHocSinh(HocSinh instance);
    partial void DeleteHocSinh(HocSinh instance);
    partial void InsertKhoiLop(KhoiLop instance);
    partial void UpdateKhoiLop(KhoiLop instance);
    partial void DeleteKhoiLop(KhoiLop instance);
    partial void InsertKyThi(KyThi instance);
    partial void UpdateKyThi(KyThi instance);
    partial void DeleteKyThi(KyThi instance);
    partial void InsertLopHoc(LopHoc instance);
    partial void UpdateLopHoc(LopHoc instance);
    partial void DeleteLopHoc(LopHoc instance);
    partial void InsertMonHoc(MonHoc instance);
    partial void UpdateMonHoc(MonHoc instance);
    partial void DeleteMonHoc(MonHoc instance);
    partial void InsertThi(Thi instance);
    partial void UpdateThi(Thi instance);
    partial void DeleteThi(Thi instance);
    #endregion
		
		public QLTTNDataContext() : 
				base(global::ThiTracNghiem.Properties.Settings.Default.QLTTNConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QLTTNDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLTTNDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLTTNDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLTTNDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CapDo> CapDos
		{
			get
			{
				return this.GetTable<CapDo>();
			}
		}
		
		public System.Data.Linq.Table<CauHoi> CauHois
		{
			get
			{
				return this.GetTable<CauHoi>();
			}
		}
		
		public System.Data.Linq.Table<DapAn> DapAns
		{
			get
			{
				return this.GetTable<DapAn>();
			}
		}
		
		public System.Data.Linq.Table<DeThi> DeThis
		{
			get
			{
				return this.GetTable<DeThi>();
			}
		}
		
		public System.Data.Linq.Table<HocSinh> HocSinhs
		{
			get
			{
				return this.GetTable<HocSinh>();
			}
		}
		
		public System.Data.Linq.Table<KhoiLop> KhoiLops
		{
			get
			{
				return this.GetTable<KhoiLop>();
			}
		}
		
		public System.Data.Linq.Table<KyThi> KyThis
		{
			get
			{
				return this.GetTable<KyThi>();
			}
		}
		
		public System.Data.Linq.Table<LopHoc> LopHocs
		{
			get
			{
				return this.GetTable<LopHoc>();
			}
		}
		
		public System.Data.Linq.Table<MonHoc> MonHocs
		{
			get
			{
				return this.GetTable<MonHoc>();
			}
		}
		
		public System.Data.Linq.Table<Thi> This
		{
			get
			{
				return this.GetTable<Thi>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CapDo")]
	public partial class CapDo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maCD;
		
		private string _NoiDung;
		
		private EntitySet<CauHoi> _CauHois;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaCDChanging(int value);
    partial void OnmaCDChanged();
    partial void OnNoiDungChanging(string value);
    partial void OnNoiDungChanged();
    #endregion
		
		public CapDo()
		{
			this._CauHois = new EntitySet<CauHoi>(new Action<CauHoi>(this.attach_CauHois), new Action<CauHoi>(this.detach_CauHois));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int maCD
		{
			get
			{
				return this._maCD;
			}
			set
			{
				if ((this._maCD != value))
				{
					this.OnmaCDChanging(value);
					this.SendPropertyChanging();
					this._maCD = value;
					this.SendPropertyChanged("maCD");
					this.OnmaCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoiDung", DbType="NVarChar(255)")]
		public string NoiDung
		{
			get
			{
				return this._NoiDung;
			}
			set
			{
				if ((this._NoiDung != value))
				{
					this.OnNoiDungChanging(value);
					this.SendPropertyChanging();
					this._NoiDung = value;
					this.SendPropertyChanged("NoiDung");
					this.OnNoiDungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapDo_CauHoi", Storage="_CauHois", ThisKey="maCD", OtherKey="maCD")]
		public EntitySet<CauHoi> CauHois
		{
			get
			{
				return this._CauHois;
			}
			set
			{
				this._CauHois.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CauHois(CauHoi entity)
		{
			this.SendPropertyChanging();
			entity.CapDo = this;
		}
		
		private void detach_CauHois(CauHoi entity)
		{
			this.SendPropertyChanging();
			entity.CapDo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CauHoi")]
	public partial class CauHoi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maCH;
		
		private string _NoiDung;
		
		private System.Nullable<int> _maCD;
		
		private EntitySet<DapAn> _DapAns;
		
		private EntitySet<DeThi> _DeThis;
		
		private EntityRef<CapDo> _CapDo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaCHChanging(int value);
    partial void OnmaCHChanged();
    partial void OnNoiDungChanging(string value);
    partial void OnNoiDungChanged();
    partial void OnmaCDChanging(System.Nullable<int> value);
    partial void OnmaCDChanged();
    #endregion
		
		public CauHoi()
		{
			this._DapAns = new EntitySet<DapAn>(new Action<DapAn>(this.attach_DapAns), new Action<DapAn>(this.detach_DapAns));
			this._DeThis = new EntitySet<DeThi>(new Action<DeThi>(this.attach_DeThis), new Action<DeThi>(this.detach_DeThis));
			this._CapDo = default(EntityRef<CapDo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCH", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int maCH
		{
			get
			{
				return this._maCH;
			}
			set
			{
				if ((this._maCH != value))
				{
					this.OnmaCHChanging(value);
					this.SendPropertyChanging();
					this._maCH = value;
					this.SendPropertyChanged("maCH");
					this.OnmaCHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoiDung", DbType="NVarChar(255)")]
		public string NoiDung
		{
			get
			{
				return this._NoiDung;
			}
			set
			{
				if ((this._NoiDung != value))
				{
					this.OnNoiDungChanging(value);
					this.SendPropertyChanging();
					this._NoiDung = value;
					this.SendPropertyChanged("NoiDung");
					this.OnNoiDungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCD", DbType="Int")]
		public System.Nullable<int> maCD
		{
			get
			{
				return this._maCD;
			}
			set
			{
				if ((this._maCD != value))
				{
					if (this._CapDo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaCDChanging(value);
					this.SendPropertyChanging();
					this._maCD = value;
					this.SendPropertyChanged("maCD");
					this.OnmaCDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CauHoi_DapAn", Storage="_DapAns", ThisKey="maCH", OtherKey="maCH")]
		public EntitySet<DapAn> DapAns
		{
			get
			{
				return this._DapAns;
			}
			set
			{
				this._DapAns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CauHoi_DeThi", Storage="_DeThis", ThisKey="maCH", OtherKey="maCH")]
		public EntitySet<DeThi> DeThis
		{
			get
			{
				return this._DeThis;
			}
			set
			{
				this._DeThis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CapDo_CauHoi", Storage="_CapDo", ThisKey="maCD", OtherKey="maCD", IsForeignKey=true)]
		public CapDo CapDo
		{
			get
			{
				return this._CapDo.Entity;
			}
			set
			{
				CapDo previousValue = this._CapDo.Entity;
				if (((previousValue != value) 
							|| (this._CapDo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CapDo.Entity = null;
						previousValue.CauHois.Remove(this);
					}
					this._CapDo.Entity = value;
					if ((value != null))
					{
						value.CauHois.Add(this);
						this._maCD = value.maCD;
					}
					else
					{
						this._maCD = default(Nullable<int>);
					}
					this.SendPropertyChanged("CapDo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DapAns(DapAn entity)
		{
			this.SendPropertyChanging();
			entity.CauHoi = this;
		}
		
		private void detach_DapAns(DapAn entity)
		{
			this.SendPropertyChanging();
			entity.CauHoi = null;
		}
		
		private void attach_DeThis(DeThi entity)
		{
			this.SendPropertyChanging();
			entity.CauHoi = this;
		}
		
		private void detach_DeThis(DeThi entity)
		{
			this.SendPropertyChanging();
			entity.CauHoi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DapAn")]
	public partial class DapAn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maCH;
		
		private int _maDA;
		
		private string _NoiDung;
		
		private System.Nullable<bool> _DungSai;
		
		private EntityRef<CauHoi> _CauHoi;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaCHChanging(int value);
    partial void OnmaCHChanged();
    partial void OnmaDAChanging(int value);
    partial void OnmaDAChanged();
    partial void OnNoiDungChanging(string value);
    partial void OnNoiDungChanged();
    partial void OnDungSaiChanging(System.Nullable<bool> value);
    partial void OnDungSaiChanged();
    #endregion
		
		public DapAn()
		{
			this._CauHoi = default(EntityRef<CauHoi>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCH", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int maCH
		{
			get
			{
				return this._maCH;
			}
			set
			{
				if ((this._maCH != value))
				{
					if (this._CauHoi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaCHChanging(value);
					this.SendPropertyChanging();
					this._maCH = value;
					this.SendPropertyChanged("maCH");
					this.OnmaCHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maDA", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int maDA
		{
			get
			{
				return this._maDA;
			}
			set
			{
				if ((this._maDA != value))
				{
					this.OnmaDAChanging(value);
					this.SendPropertyChanging();
					this._maDA = value;
					this.SendPropertyChanged("maDA");
					this.OnmaDAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoiDung", DbType="NVarChar(255)")]
		public string NoiDung
		{
			get
			{
				return this._NoiDung;
			}
			set
			{
				if ((this._NoiDung != value))
				{
					this.OnNoiDungChanging(value);
					this.SendPropertyChanging();
					this._NoiDung = value;
					this.SendPropertyChanged("NoiDung");
					this.OnNoiDungChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DungSai", DbType="Bit")]
		public System.Nullable<bool> DungSai
		{
			get
			{
				return this._DungSai;
			}
			set
			{
				if ((this._DungSai != value))
				{
					this.OnDungSaiChanging(value);
					this.SendPropertyChanging();
					this._DungSai = value;
					this.SendPropertyChanged("DungSai");
					this.OnDungSaiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CauHoi_DapAn", Storage="_CauHoi", ThisKey="maCH", OtherKey="maCH", IsForeignKey=true)]
		public CauHoi CauHoi
		{
			get
			{
				return this._CauHoi.Entity;
			}
			set
			{
				CauHoi previousValue = this._CauHoi.Entity;
				if (((previousValue != value) 
							|| (this._CauHoi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CauHoi.Entity = null;
						previousValue.DapAns.Remove(this);
					}
					this._CauHoi.Entity = value;
					if ((value != null))
					{
						value.DapAns.Add(this);
						this._maCH = value.maCH;
					}
					else
					{
						this._maCH = default(int);
					}
					this.SendPropertyChanged("CauHoi");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeThi")]
	public partial class DeThi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maDT;
		
		private string _maMH;
		
		private System.Nullable<int> _maCH;
		
		private EntitySet<Thi> _This;
		
		private EntityRef<CauHoi> _CauHoi;
		
		private EntityRef<MonHoc> _MonHoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaDTChanging(int value);
    partial void OnmaDTChanged();
    partial void OnmaMHChanging(string value);
    partial void OnmaMHChanged();
    partial void OnmaCHChanging(System.Nullable<int> value);
    partial void OnmaCHChanged();
    #endregion
		
		public DeThi()
		{
			this._This = new EntitySet<Thi>(new Action<Thi>(this.attach_This), new Action<Thi>(this.detach_This));
			this._CauHoi = default(EntityRef<CauHoi>);
			this._MonHoc = default(EntityRef<MonHoc>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maDT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int maDT
		{
			get
			{
				return this._maDT;
			}
			set
			{
				if ((this._maDT != value))
				{
					this.OnmaDTChanging(value);
					this.SendPropertyChanging();
					this._maDT = value;
					this.SendPropertyChanged("maDT");
					this.OnmaDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maMH", DbType="VarChar(10)")]
		public string maMH
		{
			get
			{
				return this._maMH;
			}
			set
			{
				if ((this._maMH != value))
				{
					if (this._MonHoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaMHChanging(value);
					this.SendPropertyChanging();
					this._maMH = value;
					this.SendPropertyChanged("maMH");
					this.OnmaMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maCH", DbType="Int")]
		public System.Nullable<int> maCH
		{
			get
			{
				return this._maCH;
			}
			set
			{
				if ((this._maCH != value))
				{
					if (this._CauHoi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaCHChanging(value);
					this.SendPropertyChanging();
					this._maCH = value;
					this.SendPropertyChanged("maCH");
					this.OnmaCHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeThi_Thi", Storage="_This", ThisKey="maDT", OtherKey="maDT")]
		public EntitySet<Thi> This
		{
			get
			{
				return this._This;
			}
			set
			{
				this._This.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CauHoi_DeThi", Storage="_CauHoi", ThisKey="maCH", OtherKey="maCH", IsForeignKey=true)]
		public CauHoi CauHoi
		{
			get
			{
				return this._CauHoi.Entity;
			}
			set
			{
				CauHoi previousValue = this._CauHoi.Entity;
				if (((previousValue != value) 
							|| (this._CauHoi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CauHoi.Entity = null;
						previousValue.DeThis.Remove(this);
					}
					this._CauHoi.Entity = value;
					if ((value != null))
					{
						value.DeThis.Add(this);
						this._maCH = value.maCH;
					}
					else
					{
						this._maCH = default(Nullable<int>);
					}
					this.SendPropertyChanged("CauHoi");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonHoc_DeThi", Storage="_MonHoc", ThisKey="maMH", OtherKey="maMH", IsForeignKey=true)]
		public MonHoc MonHoc
		{
			get
			{
				return this._MonHoc.Entity;
			}
			set
			{
				MonHoc previousValue = this._MonHoc.Entity;
				if (((previousValue != value) 
							|| (this._MonHoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MonHoc.Entity = null;
						previousValue.DeThis.Remove(this);
					}
					this._MonHoc.Entity = value;
					if ((value != null))
					{
						value.DeThis.Add(this);
						this._maMH = value.maMH;
					}
					else
					{
						this._maMH = default(string);
					}
					this.SendPropertyChanged("MonHoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_This(Thi entity)
		{
			this.SendPropertyChanging();
			entity.DeThi = this;
		}
		
		private void detach_This(Thi entity)
		{
			this.SendPropertyChanging();
			entity.DeThi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HocSinh")]
	public partial class HocSinh : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maHS;
		
		private string _HoTen;
		
		private System.Nullable<System.DateTime> _NgaySinh;
		
		private System.Nullable<int> _maKhoi;
		
		private System.Nullable<int> _maLop;
		
		private EntitySet<Thi> _This;
		
		private EntityRef<LopHoc> _LopHoc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaHSChanging(int value);
    partial void OnmaHSChanged();
    partial void OnHoTenChanging(string value);
    partial void OnHoTenChanged();
    partial void OnNgaySinhChanging(System.Nullable<System.DateTime> value);
    partial void OnNgaySinhChanged();
    partial void OnmaKhoiChanging(System.Nullable<int> value);
    partial void OnmaKhoiChanged();
    partial void OnmaLopChanging(System.Nullable<int> value);
    partial void OnmaLopChanged();
    #endregion
		
		public HocSinh()
		{
			this._This = new EntitySet<Thi>(new Action<Thi>(this.attach_This), new Action<Thi>(this.detach_This));
			this._LopHoc = default(EntityRef<LopHoc>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maHS", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int maHS
		{
			get
			{
				return this._maHS;
			}
			set
			{
				if ((this._maHS != value))
				{
					this.OnmaHSChanging(value);
					this.SendPropertyChanging();
					this._maHS = value;
					this.SendPropertyChanged("maHS");
					this.OnmaHSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoTen", DbType="NVarChar(255)")]
		public string HoTen
		{
			get
			{
				return this._HoTen;
			}
			set
			{
				if ((this._HoTen != value))
				{
					this.OnHoTenChanging(value);
					this.SendPropertyChanging();
					this._HoTen = value;
					this.SendPropertyChanged("HoTen");
					this.OnHoTenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgaySinh", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgaySinh
		{
			get
			{
				return this._NgaySinh;
			}
			set
			{
				if ((this._NgaySinh != value))
				{
					this.OnNgaySinhChanging(value);
					this.SendPropertyChanging();
					this._NgaySinh = value;
					this.SendPropertyChanged("NgaySinh");
					this.OnNgaySinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maKhoi", DbType="Int")]
		public System.Nullable<int> maKhoi
		{
			get
			{
				return this._maKhoi;
			}
			set
			{
				if ((this._maKhoi != value))
				{
					if (this._LopHoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaKhoiChanging(value);
					this.SendPropertyChanging();
					this._maKhoi = value;
					this.SendPropertyChanged("maKhoi");
					this.OnmaKhoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maLop", DbType="Int")]
		public System.Nullable<int> maLop
		{
			get
			{
				return this._maLop;
			}
			set
			{
				if ((this._maLop != value))
				{
					if (this._LopHoc.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaLopChanging(value);
					this.SendPropertyChanging();
					this._maLop = value;
					this.SendPropertyChanged("maLop");
					this.OnmaLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HocSinh_Thi", Storage="_This", ThisKey="maHS", OtherKey="maHS")]
		public EntitySet<Thi> This
		{
			get
			{
				return this._This;
			}
			set
			{
				this._This.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LopHoc_HocSinh", Storage="_LopHoc", ThisKey="maKhoi,maLop", OtherKey="maKhoi,maLop", IsForeignKey=true)]
		public LopHoc LopHoc
		{
			get
			{
				return this._LopHoc.Entity;
			}
			set
			{
				LopHoc previousValue = this._LopHoc.Entity;
				if (((previousValue != value) 
							|| (this._LopHoc.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LopHoc.Entity = null;
						previousValue.HocSinhs.Remove(this);
					}
					this._LopHoc.Entity = value;
					if ((value != null))
					{
						value.HocSinhs.Add(this);
						this._maKhoi = value.maKhoi;
						this._maLop = value.maLop;
					}
					else
					{
						this._maKhoi = default(Nullable<int>);
						this._maLop = default(Nullable<int>);
					}
					this.SendPropertyChanged("LopHoc");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_This(Thi entity)
		{
			this.SendPropertyChanging();
			entity.HocSinh = this;
		}
		
		private void detach_This(Thi entity)
		{
			this.SendPropertyChanging();
			entity.HocSinh = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KhoiLop")]
	public partial class KhoiLop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maKhoi;
		
		private EntitySet<LopHoc> _LopHocs;
		
		private EntitySet<MonHoc> _MonHocs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaKhoiChanging(int value);
    partial void OnmaKhoiChanged();
    #endregion
		
		public KhoiLop()
		{
			this._LopHocs = new EntitySet<LopHoc>(new Action<LopHoc>(this.attach_LopHocs), new Action<LopHoc>(this.detach_LopHocs));
			this._MonHocs = new EntitySet<MonHoc>(new Action<MonHoc>(this.attach_MonHocs), new Action<MonHoc>(this.detach_MonHocs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maKhoi", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int maKhoi
		{
			get
			{
				return this._maKhoi;
			}
			set
			{
				if ((this._maKhoi != value))
				{
					this.OnmaKhoiChanging(value);
					this.SendPropertyChanging();
					this._maKhoi = value;
					this.SendPropertyChanged("maKhoi");
					this.OnmaKhoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhoiLop_LopHoc", Storage="_LopHocs", ThisKey="maKhoi", OtherKey="maKhoi")]
		public EntitySet<LopHoc> LopHocs
		{
			get
			{
				return this._LopHocs;
			}
			set
			{
				this._LopHocs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhoiLop_MonHoc", Storage="_MonHocs", ThisKey="maKhoi", OtherKey="maKhoi")]
		public EntitySet<MonHoc> MonHocs
		{
			get
			{
				return this._MonHocs;
			}
			set
			{
				this._MonHocs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LopHocs(LopHoc entity)
		{
			this.SendPropertyChanging();
			entity.KhoiLop = this;
		}
		
		private void detach_LopHocs(LopHoc entity)
		{
			this.SendPropertyChanging();
			entity.KhoiLop = null;
		}
		
		private void attach_MonHocs(MonHoc entity)
		{
			this.SendPropertyChanging();
			entity.KhoiLop = this;
		}
		
		private void detach_MonHocs(MonHoc entity)
		{
			this.SendPropertyChanging();
			entity.KhoiLop = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KyThi")]
	public partial class KyThi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _maKT;
		
		private System.Nullable<System.DateTime> _NgayThi;
		
		private EntitySet<Thi> _This;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaKTChanging(string value);
    partial void OnmaKTChanged();
    partial void OnNgayThiChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayThiChanged();
    #endregion
		
		public KyThi()
		{
			this._This = new EntitySet<Thi>(new Action<Thi>(this.attach_This), new Action<Thi>(this.detach_This));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maKT", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string maKT
		{
			get
			{
				return this._maKT;
			}
			set
			{
				if ((this._maKT != value))
				{
					this.OnmaKTChanging(value);
					this.SendPropertyChanging();
					this._maKT = value;
					this.SendPropertyChanged("maKT");
					this.OnmaKTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayThi", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayThi
		{
			get
			{
				return this._NgayThi;
			}
			set
			{
				if ((this._NgayThi != value))
				{
					this.OnNgayThiChanging(value);
					this.SendPropertyChanging();
					this._NgayThi = value;
					this.SendPropertyChanged("NgayThi");
					this.OnNgayThiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KyThi_Thi", Storage="_This", ThisKey="maKT", OtherKey="maKT")]
		public EntitySet<Thi> This
		{
			get
			{
				return this._This;
			}
			set
			{
				this._This.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_This(Thi entity)
		{
			this.SendPropertyChanging();
			entity.KyThi = this;
		}
		
		private void detach_This(Thi entity)
		{
			this.SendPropertyChanging();
			entity.KyThi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LopHoc")]
	public partial class LopHoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _maKhoi;
		
		private int _maLop;
		
		private EntitySet<HocSinh> _HocSinhs;
		
		private EntityRef<KhoiLop> _KhoiLop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaKhoiChanging(int value);
    partial void OnmaKhoiChanged();
    partial void OnmaLopChanging(int value);
    partial void OnmaLopChanged();
    #endregion
		
		public LopHoc()
		{
			this._HocSinhs = new EntitySet<HocSinh>(new Action<HocSinh>(this.attach_HocSinhs), new Action<HocSinh>(this.detach_HocSinhs));
			this._KhoiLop = default(EntityRef<KhoiLop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maKhoi", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int maKhoi
		{
			get
			{
				return this._maKhoi;
			}
			set
			{
				if ((this._maKhoi != value))
				{
					if (this._KhoiLop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaKhoiChanging(value);
					this.SendPropertyChanging();
					this._maKhoi = value;
					this.SendPropertyChanged("maKhoi");
					this.OnmaKhoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maLop", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int maLop
		{
			get
			{
				return this._maLop;
			}
			set
			{
				if ((this._maLop != value))
				{
					this.OnmaLopChanging(value);
					this.SendPropertyChanging();
					this._maLop = value;
					this.SendPropertyChanged("maLop");
					this.OnmaLopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LopHoc_HocSinh", Storage="_HocSinhs", ThisKey="maKhoi,maLop", OtherKey="maKhoi,maLop")]
		public EntitySet<HocSinh> HocSinhs
		{
			get
			{
				return this._HocSinhs;
			}
			set
			{
				this._HocSinhs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhoiLop_LopHoc", Storage="_KhoiLop", ThisKey="maKhoi", OtherKey="maKhoi", IsForeignKey=true)]
		public KhoiLop KhoiLop
		{
			get
			{
				return this._KhoiLop.Entity;
			}
			set
			{
				KhoiLop previousValue = this._KhoiLop.Entity;
				if (((previousValue != value) 
							|| (this._KhoiLop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KhoiLop.Entity = null;
						previousValue.LopHocs.Remove(this);
					}
					this._KhoiLop.Entity = value;
					if ((value != null))
					{
						value.LopHocs.Add(this);
						this._maKhoi = value.maKhoi;
					}
					else
					{
						this._maKhoi = default(int);
					}
					this.SendPropertyChanged("KhoiLop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HocSinhs(HocSinh entity)
		{
			this.SendPropertyChanging();
			entity.LopHoc = this;
		}
		
		private void detach_HocSinhs(HocSinh entity)
		{
			this.SendPropertyChanging();
			entity.LopHoc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MonHoc")]
	public partial class MonHoc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _maMH;
		
		private string _tenMH;
		
		private System.Nullable<int> _maKhoi;
		
		private EntitySet<DeThi> _DeThis;
		
		private EntityRef<KhoiLop> _KhoiLop;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaMHChanging(string value);
    partial void OnmaMHChanged();
    partial void OntenMHChanging(string value);
    partial void OntenMHChanged();
    partial void OnmaKhoiChanging(System.Nullable<int> value);
    partial void OnmaKhoiChanged();
    #endregion
		
		public MonHoc()
		{
			this._DeThis = new EntitySet<DeThi>(new Action<DeThi>(this.attach_DeThis), new Action<DeThi>(this.detach_DeThis));
			this._KhoiLop = default(EntityRef<KhoiLop>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maMH", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string maMH
		{
			get
			{
				return this._maMH;
			}
			set
			{
				if ((this._maMH != value))
				{
					this.OnmaMHChanging(value);
					this.SendPropertyChanging();
					this._maMH = value;
					this.SendPropertyChanged("maMH");
					this.OnmaMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tenMH", DbType="NVarChar(255)")]
		public string tenMH
		{
			get
			{
				return this._tenMH;
			}
			set
			{
				if ((this._tenMH != value))
				{
					this.OntenMHChanging(value);
					this.SendPropertyChanging();
					this._tenMH = value;
					this.SendPropertyChanged("tenMH");
					this.OntenMHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maKhoi", DbType="Int")]
		public System.Nullable<int> maKhoi
		{
			get
			{
				return this._maKhoi;
			}
			set
			{
				if ((this._maKhoi != value))
				{
					if (this._KhoiLop.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaKhoiChanging(value);
					this.SendPropertyChanging();
					this._maKhoi = value;
					this.SendPropertyChanged("maKhoi");
					this.OnmaKhoiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MonHoc_DeThi", Storage="_DeThis", ThisKey="maMH", OtherKey="maMH")]
		public EntitySet<DeThi> DeThis
		{
			get
			{
				return this._DeThis;
			}
			set
			{
				this._DeThis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhoiLop_MonHoc", Storage="_KhoiLop", ThisKey="maKhoi", OtherKey="maKhoi", IsForeignKey=true)]
		public KhoiLop KhoiLop
		{
			get
			{
				return this._KhoiLop.Entity;
			}
			set
			{
				KhoiLop previousValue = this._KhoiLop.Entity;
				if (((previousValue != value) 
							|| (this._KhoiLop.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KhoiLop.Entity = null;
						previousValue.MonHocs.Remove(this);
					}
					this._KhoiLop.Entity = value;
					if ((value != null))
					{
						value.MonHocs.Add(this);
						this._maKhoi = value.maKhoi;
					}
					else
					{
						this._maKhoi = default(Nullable<int>);
					}
					this.SendPropertyChanged("KhoiLop");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeThis(DeThi entity)
		{
			this.SendPropertyChanging();
			entity.MonHoc = this;
		}
		
		private void detach_DeThis(DeThi entity)
		{
			this.SendPropertyChanging();
			entity.MonHoc = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Thi")]
	public partial class Thi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _maKT;
		
		private int _maDT;
		
		private int _maHS;
		
		private System.Nullable<decimal> _Diem;
		
		private EntityRef<DeThi> _DeThi;
		
		private EntityRef<HocSinh> _HocSinh;
		
		private EntityRef<KyThi> _KyThi;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmaKTChanging(string value);
    partial void OnmaKTChanged();
    partial void OnmaDTChanging(int value);
    partial void OnmaDTChanged();
    partial void OnmaHSChanging(int value);
    partial void OnmaHSChanged();
    partial void OnDiemChanging(System.Nullable<decimal> value);
    partial void OnDiemChanged();
    #endregion
		
		public Thi()
		{
			this._DeThi = default(EntityRef<DeThi>);
			this._HocSinh = default(EntityRef<HocSinh>);
			this._KyThi = default(EntityRef<KyThi>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maKT", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string maKT
		{
			get
			{
				return this._maKT;
			}
			set
			{
				if ((this._maKT != value))
				{
					if (this._KyThi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaKTChanging(value);
					this.SendPropertyChanging();
					this._maKT = value;
					this.SendPropertyChanged("maKT");
					this.OnmaKTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maDT", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int maDT
		{
			get
			{
				return this._maDT;
			}
			set
			{
				if ((this._maDT != value))
				{
					if (this._DeThi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaDTChanging(value);
					this.SendPropertyChanging();
					this._maDT = value;
					this.SendPropertyChanged("maDT");
					this.OnmaDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_maHS", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int maHS
		{
			get
			{
				return this._maHS;
			}
			set
			{
				if ((this._maHS != value))
				{
					if (this._HocSinh.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmaHSChanging(value);
					this.SendPropertyChanging();
					this._maHS = value;
					this.SendPropertyChanged("maHS");
					this.OnmaHSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diem", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Diem
		{
			get
			{
				return this._Diem;
			}
			set
			{
				if ((this._Diem != value))
				{
					this.OnDiemChanging(value);
					this.SendPropertyChanging();
					this._Diem = value;
					this.SendPropertyChanged("Diem");
					this.OnDiemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeThi_Thi", Storage="_DeThi", ThisKey="maDT", OtherKey="maDT", IsForeignKey=true)]
		public DeThi DeThi
		{
			get
			{
				return this._DeThi.Entity;
			}
			set
			{
				DeThi previousValue = this._DeThi.Entity;
				if (((previousValue != value) 
							|| (this._DeThi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeThi.Entity = null;
						previousValue.This.Remove(this);
					}
					this._DeThi.Entity = value;
					if ((value != null))
					{
						value.This.Add(this);
						this._maDT = value.maDT;
					}
					else
					{
						this._maDT = default(int);
					}
					this.SendPropertyChanged("DeThi");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HocSinh_Thi", Storage="_HocSinh", ThisKey="maHS", OtherKey="maHS", IsForeignKey=true)]
		public HocSinh HocSinh
		{
			get
			{
				return this._HocSinh.Entity;
			}
			set
			{
				HocSinh previousValue = this._HocSinh.Entity;
				if (((previousValue != value) 
							|| (this._HocSinh.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HocSinh.Entity = null;
						previousValue.This.Remove(this);
					}
					this._HocSinh.Entity = value;
					if ((value != null))
					{
						value.This.Add(this);
						this._maHS = value.maHS;
					}
					else
					{
						this._maHS = default(int);
					}
					this.SendPropertyChanged("HocSinh");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KyThi_Thi", Storage="_KyThi", ThisKey="maKT", OtherKey="maKT", IsForeignKey=true)]
		public KyThi KyThi
		{
			get
			{
				return this._KyThi.Entity;
			}
			set
			{
				KyThi previousValue = this._KyThi.Entity;
				if (((previousValue != value) 
							|| (this._KyThi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KyThi.Entity = null;
						previousValue.This.Remove(this);
					}
					this._KyThi.Entity = value;
					if ((value != null))
					{
						value.This.Add(this);
						this._maKT = value.maKT;
					}
					else
					{
						this._maKT = default(string);
					}
					this.SendPropertyChanged("KyThi");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
